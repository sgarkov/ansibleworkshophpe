---
# setup_ansible_user.yml
- name: Setup Ansible User and Configuration on All Servers
  hosts: all_servers
  become: yes
  vars:
    ansible_service_user: ansible
    ansible_service_user_home: /home/ansible
    
  tasks:
    - name: Create ansible user
      user:
        name: "{{ ansible_service_user }}"
        state: present
        shell: /bin/bash
        home: "{{ ansible_service_user_home }}"
        create_home: yes
        system: no
        groups: wheel
        append: yes
      tags: user_creation

    - name: Set password for ansible user (optional - for emergency access)
      user:
        name: "{{ ansible_service_user }}"
        password: "{{ 'ansible123' | password_hash('sha512') }}"
      tags: user_creation

    - name: Create .ssh directory for ansible user
      file:
        path: "{{ ansible_service_user_home }}/.ssh"
        state: directory
        owner: "{{ ansible_service_user }}"
        group: "{{ ansible_service_user }}"
        mode: '0700'
      tags: ssh_setup

    - name: Generate SSH key pair for ansible user on control node
      openssh_keypair:
        path: "{{ ansible_service_user_home }}/.ssh/id_rsa"
        type: rsa
        size: 4096
        owner: "{{ ansible_service_user }}"
        group: "{{ ansible_service_user }}"
        mode: '0600'
      when: inventory_hostname in groups['control']
      tags: ssh_setup

    - name: Fetch public key from control node
      slurp:
        src: "{{ ansible_service_user_home }}/.ssh/id_rsa.pub"
      register: ansible_public_key
      when: inventory_hostname in groups['control']
      tags: ssh_setup

    - name: Set public key fact for all hosts
      set_fact:
        ansible_pubkey: "{{ hostvars[groups['control'][0]]['ansible_public_key']['content'] | b64decode }}"
      tags: ssh_setup

    - name: Add ansible user public key to authorized_keys on all servers
      authorized_key:
        user: "{{ ansible_service_user }}"
        key: "{{ ansible_pubkey }}"
        state: present
      tags: ssh_setup

    - name: Configure sudoers for ansible user
      copy:
        content: |
          # Ansible user sudoers configuration
          {{ ansible_service_user }} ALL=(ALL) NOPASSWD: ALL
          
          # Optional: Restrict to specific commands if needed
          # {{ ansible_service_user }} ALL=(ALL) NOPASSWD: /bin/systemctl, /usr/bin/yum, /usr/bin/dnf
        dest: /etc/sudoers.d/{{ ansible_service_user }}
        owner: root
        group: root
        mode: '0440'
        validate: 'visudo -cf %s'
      tags: sudo_setup

    - name: Ensure wheel group has sudo access (RHEL default)
      lineinfile:
        path: /etc/sudoers
        regexp: '^%wheel\s'
        line: '%wheel ALL=(ALL) ALL'
        validate: 'visudo -cf %s'
      tags: sudo_setup

    - name: Configure SSH for better security and performance
      blockinfile:
        path: /etc/ssh/sshd_config
        block: |
          # Ansible optimizations
          UseDNS no
          PubkeyAuthentication yes
          PasswordAuthentication yes
          PermitRootLogin yes
          
          # Security improvements
          Protocol 2
          MaxAuthTries 3
          ClientAliveInterval 300
          ClientAliveCountMax 2
        marker: "# {mark} ANSIBLE MANAGED BLOCK"
        backup: yes
      notify: restart sshd
      tags: ssh_config

    - name: Set proper permissions on ansible user home directory
      file:
        path: "{{ ansible_service_user_home }}"
        owner: "{{ ansible_service_user }}"
        group: "{{ ansible_service_user }}"
        mode: '0755'
      tags: permissions

    - name: Create ansible configuration directory
      file:
        path: "{{ ansible_service_user_home }}/.ansible"
        state: directory
        owner: "{{ ansible_service_user }}"
        group: "{{ ansible_service_user }}"
        mode: '0755'
      when: inventory_hostname in groups['control']
      tags: ansible_config

  handlers:
    - name: restart sshd
      systemd:
        name: sshd
        state: restarted

# Second play to update inventory and test connectivity
- name: Update Ansible Configuration and Test
  hosts: control
  become: yes
  become_user: ansible
  vars:
    ansible_service_user: ansible
    
  tasks:
    - name: Create updated inventory file for ansible user
      copy:
        content: |
          # Updated inventory for ansible user
          [control]
          server1 ansible_host={{ hostvars['server1']['ansible_host'] }}

          [managed_nodes]
          {% for host in groups['managed_nodes'] %}
          {{ host }} ansible_host={{ hostvars[host]['ansible_host'] }}
          {% endfor %}

          [all_servers:children]
          control
          managed_nodes

          [all_servers:vars]
          ansible_user={{ ansible_service_user }}
          ansible_ssh_private_key_file=/home/{{ ansible_service_user }}/.ssh/id_rsa
          ansible_ssh_common_args='-o StrictHostKeyChecking=no'
        dest: /home/{{ ansible_service_user }}/inventory.ini
        owner: "{{ ansible_service_user }}"
        group: "{{ ansible_service_user }}"
        mode: '0644'
      tags: final_config

    - name: Create ansible.cfg for the ansible user
      copy:
        content: |
          [defaults]
          inventory = /home/{{ ansible_service_user }}/inventory.ini
          remote_user = {{ ansible_service_user }}
          private_key_file = /home/{{ ansible_service_user }}/.ssh/id_rsa
          host_key_checking = False
          retry_files_enabled = False
          gathering = smart
          fact_caching = memory
          
          [ssh_connection]
          ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no
          pipelining = True
        dest: /home/{{ ansible_service_user }}/.ansible.cfg
        owner: "{{ ansible_service_user }}"
        group: "{{ ansible_service_user }}"
        mode: '0644'
      tags: final_config
